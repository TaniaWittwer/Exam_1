conviction_full <- data.frame(lapply(conviction_full, function(x) as.numeric(as.factor(x))))
#have a look to the deliquency rate
table(conviction_full$as_juvenile)
#result is 327 (80%) of non delinquent and 84 (20%) delinguent in our sample
#all variables have been explored, however only the most relevant (the one which will be included in the prediction model) will appear here
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_dad)
library(tidyverse)
#all variables have been explored, however only the most relevant (the one which will be included in the prediction model) will appear here
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_mum)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~familysize)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~job_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~iq)
table(conviction_full$as_juvenile, conviction_full$friends)
table(conviction_full$as_juvenile, conviction_full$withdrawn)
table(conviction_full$as_juvenile, conviction_full$attitude_dad)
table(conviction_full$as_juvenile, conviction_full$iq)
table(conviction_full$as_juvenile, conviction_full$popularity)
table(conviction_full$as_juvenile, conviction_full$attendance)
delinquency <- read_spss("Cambridge_delinquency_with_caseid.sav")
install.packages("pacman")
library(pacman)
p_load(tidyverse, haven, tufte, knitr, magrittr, psych, stats)
delinquency <- read_spss("Cambridge_delinquency_with_caseid.sav")
conviction <- read_spss("conviction_data.sav")
predictors_1 <-
delinquency %>%
select(v4, v53, v62, v63, v69, v83, v89, v91, v96, v104, v105, v117, v118, v119, v123, v125, v137, v138, v155)
predictor_1 <- rename(predictors_1, id = v4, conduct = v53, disc_dad = v62, disc_mum = v63, familysize = v69, housecare = v83, betw_parents = v89, educ_interest = v91, job_dad = v96, nervousness = v104, friends = v105, withdrawn = v117, attitude_dad = v118, iq = v119, phys_neglect = v123, popularity = v125, sibl_disturb = v137, socioeco_fam = v138, attendance = v155)
#Give labels to variables for clarity
predictor_1$conduct <- factor(predictor_1$conduct,
levels = c(0,1,2,3),
labels = c("unknown", "well", "moderatebad", "verybadly"))
predictor_1$disc_dad <- factor(predictor_1$disc_dad,
levels = c(0,1,2,3,4,5),
labels = c("unknown", "not", "spoilt", "harsh", "disinterest", "NA"))
predictor_1$disc_mum <- factor(predictor_1$disc_mum,
levels = c(0,1,2,3,4,5),
labels = c("unknown", "not", "spoilt", "harsh", "disinterest", "NA"))
predictor_1$familysize <- factor(predictor_1$familysize,
levels = c(1,2,3,4,5,6),
labels = c("none", "one", "two", "three", "four", "five_more"))
predictor_1$housecare <- factor(predictor_1$housecare,
levels = c(0,1,2),
labels = c("unknown", "satisfactory", "veryneglected"))
predictor_1$betw_parents <- factor(predictor_1$betw_parents,
levels = c(0,1,2,3),
labels = c("unknown", "consistency", "inconsistency", "NA"))
predictor_1$educ_interest <- factor(predictor_1$educ_interest,
levels = c(0,1,2,3),
labels = c("unknown", "veryinterested", "average", "notinterested"))
predictor_1$job_dad <- factor(predictor_1$job_dad,
levels = c(0,1,2,3,4),
labels = c("unknown", "alwstable", "nowstable", "erractic", "NA"))
predictor_1$nervousness <- factor(predictor_1$nervousness,
levels = c(0,1,2,3,4),
labels = c("unknown", "not", "minimal", "moderate", "severe"))
predictor_1$friends <- factor(predictor_1$friends,
levels = c(0,1,2,3),
labels = c("unknown", "many", "average", "fewornot"))
predictor_1$withdrawn <- factor(predictor_1$withdrawn,
levels = c(0,1,2,3),
labels = c("unknown", "atease", "normal", "shyorwithdrawn"))
predictor_1$attitude_dad <- factor(predictor_1$attitude_dad,
levels = c(0,1,2,3,4,5,6),
labels = c("unknown", "warm", "passive", "cruel", "neglected", "absent", "dead"))
predictor_1$iq <- factor(predictor_1$iq,
levels = c(1,2,3,4),
labels = c("min111", "101-110", "91-100", "max90"))
predictor_1$phys_neglect <- factor(predictor_1$phys_neglect,
levels = c(0,1,2),
labels = c("unknown", "absent", "present"))
predictor_1$popularity <- factor(predictor_1$popularity,
levels = c(0,1,2,3,4),
labels = c("unknown", "popular", "averagepop", "averageunpop", "unpopular"))
predictor_1$sibl_disturb <- factor(predictor_1$sibl_disturb,
levels = c(0,1,2,3),
labels = c("unknown", "none", "distrubance", "NA"))
predictor_1$socioeco_fam <- factor(predictor_1$socioeco_fam,
levels = c(1,2,3,4,5,6),
labels = c("II-NM", "III-NM", "III-M", "IV-NM", "IV-M", "V"))
predictor_1$attendance <- factor(predictor_1$attendance,
levels = c(0,1,2),
labels = c("unknown", "satisfactory", "truance_abstsm"))
#rename to avoid 'variable not found' problem
conviction <- rename(conviction, id = icpsr_seq_id_number)
#make a wide table
conviction_spread <-
spread(data = conviction, key = id, value = convicted)
#select only variable containing conviction as adult or juvenile
conviction2a <- conviction_spread[6,]
conviction2b <- conviction_spread[7,]
#make a long table and rename to avoid matching error and for clarity
conviction3a <-
gather(conviction2a, key = id, value = agecat) %>%
rename(as_adult = agecat)
conviction3b <-
gather(conviction2b, key = id, value = agecat) %>%
rename(as_juvenile = agecat)
#merge two tables
conviction_merge <- left_join(conviction3a, conviction3b, by = "id")
#create a new binary variable as convicted versus never convicted, resulting on if not convicted as adult (=1) and as juvenile(=1), then not convicted (=1), otherwise convicted (=2)
conviction_merge$convicted <- if_else(conviction_merge$as_adult == 1 & conviction_merge$as_juvenile == 1, 1, 2)
conviction_merge$convicted <- factor(conviction_merge$convicted,
levels = c(1,2),
labels = c("never", "atleastonce"))
#transform id as factor in the predictor datafile
predictor_1$id <- as.factor(predictor_1$id)
#merge
conviction_full <- left_join(predictor_1, conviction_merge, by = "id")
#transform all variable as numeric
conviction_full <- data.frame(lapply(conviction_full, function(x) as.numeric(as.factor(x))))
#have a look to the deliquency rate
table(conviction_full$as_juvenile)
#result is 327 (80%) of non delinquent and 84 (20%) delinguent in our sample
#all variables have been explored, however only the most relevant (the one which will be included in the prediction model) will appear here
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_mum)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~familysize)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~job_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~iq)
table(conviction_full$as_juvenile, conviction_full$friends)
table(conviction_full$as_juvenile, conviction_full$withdrawn)
table(conviction_full$as_juvenile, conviction_full$attitude_dad)
table(conviction_full$as_juvenile, conviction_full$iq)
table(conviction_full$as_juvenile, conviction_full$popularity)
table(conviction_full$as_juvenile, conviction_full$attendance)
#transform id variable as numeric
conviction_full$id <- as.numeric(conviction_full$id)
#have a look to the deliquency rate
table(conviction_full$as_juvenile)
#result is 327 (80%) of non delinquent and 84 (20%) delinguent in our sample
#all variables have been explored, however only the most relevant (the one which will be included in the prediction model) will appear here
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_mum)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~familysize)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~job_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~iq)
table(conviction_full$as_juvenile, conviction_full$friends)
table(conviction_full$as_juvenile, conviction_full$withdrawn)
table(conviction_full$as_juvenile, conviction_full$attitude_dad)
table(conviction_full$as_juvenile, conviction_full$iq)
table(conviction_full$as_juvenile, conviction_full$popularity)
table(conviction_full$as_juvenile, conviction_full$attendance)
predictors_1 <-
delinquency %>%
select(v4, v53, v62, v63, v69, v83, v89, v91, v96, v104, v105, v117, v118, v119, v123, v125, v137, v138, v155)
predictor_1 <- rename(predictors_1, id = v4, conduct = v53, disc_dad = v62, disc_mum = v63, familysize = v69, housecare = v83, betw_parents = v89, educ_interest = v91, job_dad = v96, nervousness = v104, friends = v105, withdrawn = v117, attitude_dad = v118, iq = v119, phys_neglect = v123, popularity = v125, sibl_disturb = v137, socioeco_fam = v138, attendance = v155)
#Give labels to variables for clarity
predictor_1$conduct <- factor(predictor_1$conduct,
levels = c(0,1,2,3),
labels = c("unknown", "well", "moderatebad", "verybadly"))
predictor_1$disc_dad <- factor(predictor_1$disc_dad,
levels = c(0,1,2,3,4,5),
labels = c("unknown", "not", "spoilt", "harsh", "disinterest", "NA"))
predictor_1$disc_mum <- factor(predictor_1$disc_mum,
levels = c(0,1,2,3,4,5),
labels = c("unknown", "not", "spoilt", "harsh", "disinterest", "NA"))
predictor_1$familysize <- factor(predictor_1$familysize,
levels = c(1,2,3,4,5,6),
labels = c("none", "one", "two", "three", "four", "five_more"))
predictor_1$housecare <- factor(predictor_1$housecare,
levels = c(0,1,2),
labels = c("unknown", "satisfactory", "veryneglected"))
predictor_1$betw_parents <- factor(predictor_1$betw_parents,
levels = c(0,1,2,3),
labels = c("unknown", "consistency", "inconsistency", "NA"))
predictor_1$educ_interest <- factor(predictor_1$educ_interest,
levels = c(0,1,2,3),
labels = c("unknown", "veryinterested", "average", "notinterested"))
predictor_1$job_dad <- factor(predictor_1$job_dad,
levels = c(0,1,2,3,4),
labels = c("unknown", "alwstable", "nowstable", "erractic", "NA"))
predictor_1$nervousness <- factor(predictor_1$nervousness,
levels = c(0,1,2,3,4),
labels = c("unknown", "not", "minimal", "moderate", "severe"))
predictor_1$friends <- factor(predictor_1$friends,
levels = c(0,1,2,3),
labels = c("unknown", "many", "average", "fewornot"))
predictor_1$withdrawn <- factor(predictor_1$withdrawn,
levels = c(0,1,2,3),
labels = c("unknown", "atease", "normal", "shyorwithdrawn"))
predictor_1$attitude_dad <- factor(predictor_1$attitude_dad,
levels = c(0,1,2,3,4,5,6),
labels = c("unknown", "warm", "passive", "cruel", "neglected", "absent", "dead"))
predictor_1$iq <- factor(predictor_1$iq,
levels = c(1,2,3,4),
labels = c("min111", "101-110", "91-100", "max90"))
predictor_1$phys_neglect <- factor(predictor_1$phys_neglect,
levels = c(0,1,2),
labels = c("unknown", "absent", "present"))
predictor_1$popularity <- factor(predictor_1$popularity,
levels = c(0,1,2,3,4),
labels = c("unknown", "popular", "averagepop", "averageunpop", "unpopular"))
predictor_1$sibl_disturb <- factor(predictor_1$sibl_disturb,
levels = c(0,1,2,3),
labels = c("unknown", "none", "distrubance", "NA"))
predictor_1$socioeco_fam <- factor(predictor_1$socioeco_fam,
levels = c(1,2,3,4,5,6),
labels = c("II-NM", "III-NM", "III-M", "IV-NM", "IV-M", "V"))
predictor_1$attendance <- factor(predictor_1$attendance,
levels = c(0,1,2),
labels = c("unknown", "satisfactory", "truance_abstsm"))
#rename to avoid 'variable not found' problem
conviction <- rename(conviction, id = icpsr_seq_id_number)
delinquency <- read_spss("Cambridge_delinquency_with_caseid.sav")
conviction <- read_spss("conviction_data.sav")
predictors_1 <-
delinquency %>%
select(v4, v53, v62, v63, v69, v83, v89, v91, v96, v104, v105, v117, v118, v119, v123, v125, v137, v138, v155)
predictor_1 <- rename(predictors_1, id = v4, conduct = v53, disc_dad = v62, disc_mum = v63, familysize = v69, housecare = v83, betw_parents = v89, educ_interest = v91, job_dad = v96, nervousness = v104, friends = v105, withdrawn = v117, attitude_dad = v118, iq = v119, phys_neglect = v123, popularity = v125, sibl_disturb = v137, socioeco_fam = v138, attendance = v155)
#Give labels to variables for clarity
predictor_1$conduct <- factor(predictor_1$conduct,
levels = c(0,1,2,3),
labels = c("unknown", "well", "moderatebad", "verybadly"))
predictor_1$disc_dad <- factor(predictor_1$disc_dad,
levels = c(0,1,2,3,4,5),
labels = c("unknown", "not", "spoilt", "harsh", "disinterest", "NA"))
predictor_1$disc_mum <- factor(predictor_1$disc_mum,
levels = c(0,1,2,3,4,5),
labels = c("unknown", "not", "spoilt", "harsh", "disinterest", "NA"))
predictor_1$familysize <- factor(predictor_1$familysize,
levels = c(1,2,3,4,5,6),
labels = c("none", "one", "two", "three", "four", "five_more"))
predictor_1$housecare <- factor(predictor_1$housecare,
levels = c(0,1,2),
labels = c("unknown", "satisfactory", "veryneglected"))
predictor_1$betw_parents <- factor(predictor_1$betw_parents,
levels = c(0,1,2,3),
labels = c("unknown", "consistency", "inconsistency", "NA"))
predictor_1$educ_interest <- factor(predictor_1$educ_interest,
levels = c(0,1,2,3),
labels = c("unknown", "veryinterested", "average", "notinterested"))
predictor_1$job_dad <- factor(predictor_1$job_dad,
levels = c(0,1,2,3,4),
labels = c("unknown", "alwstable", "nowstable", "erractic", "NA"))
predictor_1$nervousness <- factor(predictor_1$nervousness,
levels = c(0,1,2,3,4),
labels = c("unknown", "not", "minimal", "moderate", "severe"))
predictor_1$friends <- factor(predictor_1$friends,
levels = c(0,1,2,3),
labels = c("unknown", "many", "average", "fewornot"))
predictor_1$withdrawn <- factor(predictor_1$withdrawn,
levels = c(0,1,2,3),
labels = c("unknown", "atease", "normal", "shyorwithdrawn"))
predictor_1$attitude_dad <- factor(predictor_1$attitude_dad,
levels = c(0,1,2,3,4,5,6),
labels = c("unknown", "warm", "passive", "cruel", "neglected", "absent", "dead"))
predictor_1$iq <- factor(predictor_1$iq,
levels = c(1,2,3,4),
labels = c("min111", "101-110", "91-100", "max90"))
predictor_1$phys_neglect <- factor(predictor_1$phys_neglect,
levels = c(0,1,2),
labels = c("unknown", "absent", "present"))
predictor_1$popularity <- factor(predictor_1$popularity,
levels = c(0,1,2,3,4),
labels = c("unknown", "popular", "averagepop", "averageunpop", "unpopular"))
predictor_1$sibl_disturb <- factor(predictor_1$sibl_disturb,
levels = c(0,1,2,3),
labels = c("unknown", "none", "distrubance", "NA"))
predictor_1$socioeco_fam <- factor(predictor_1$socioeco_fam,
levels = c(1,2,3,4,5,6),
labels = c("II-NM", "III-NM", "III-M", "IV-NM", "IV-M", "V"))
predictor_1$attendance <- factor(predictor_1$attendance,
levels = c(0,1,2),
labels = c("unknown", "satisfactory", "truance_abstsm"))
#rename to avoid 'variable not found' problem
conviction <- rename(conviction, id = icpsr_seq_id_number)
#make a wide table
conviction_spread <-
spread(data = conviction, key = id, value = convicted)
#select only variable containing conviction as adult or juvenile
conviction2a <- conviction_spread[6,]
conviction2b <- conviction_spread[7,]
#make a long table and rename to avoid matching error and for clarity
conviction3a <-
gather(conviction2a, key = id, value = agecat) %>%
rename(as_adult = agecat)
conviction3b <-
gather(conviction2b, key = id, value = agecat) %>%
rename(as_juvenile = agecat)
#merge two tables
conviction_merge <- left_join(conviction3a, conviction3b, by = "id")
#create a new binary variable as convicted versus never convicted, resulting on if not convicted as adult (=1) and as juvenile(=1), then not convicted (=1), otherwise convicted (=2)
conviction_merge$convicted <- if_else(conviction_merge$as_adult == 1 & conviction_merge$as_juvenile == 1, 1, 2)
conviction_merge$convicted <- factor(conviction_merge$convicted,
levels = c(1,2),
labels = c("never", "atleastonce"))
#transform id as factor in the predictor datafile
predictor_1$id <- as.factor(predictor_1$id)
#merge
conviction_full <- left_join(predictor_1, conviction_merge, by = "id")
#transform id variable as numeric
conviction_full$id <- as.numeric(conviction_full$id)
#have a look to the deliquency rate
table(conviction_full$as_juvenile)
#result is 327 (80%) of non delinquent and 84 (20%) delinguent in our sample
#all variables have been explored, however only the most relevant (the one which will be included in the prediction model) will appear here
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~disc_mum)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~familysize)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~job_dad)
ggplot(data = conviction_full, aes(x = as_juvenile))+
geom_bar(aes(y = ..prop.., group = 2))+
facet_wrap(~iq)
table(conviction_full$as_juvenile, conviction_full$friends)
table(conviction_full$as_juvenile, conviction_full$withdrawn)
table(conviction_full$as_juvenile, conviction_full$attitude_dad)
table(conviction_full$as_juvenile, conviction_full$iq)
table(conviction_full$as_juvenile, conviction_full$popularity)
table(conviction_full$as_juvenile, conviction_full$attendance)
#create the final dataset for the predictor model
final_delinquency <-
conviction_full %>%
select(as_juvenile, disc_dad, disc_mum, familysize, job_dad, friends, withdrawn, attitude_dad, iq, popularity, attendance)
#convert predictors as numeric
final_delinquency <- data.frame(lapply(final_delinquency, function(x) as.numeric(as.factor(x))))
#explore the potentiel correlations (to deduce potentuel interactions)
pairs.panels(final_delinquency, stars = TRUE)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, 0.50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#try a linear model
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
summary(model1)
#try a linear model
model1 <- glm(as_juvenile ~ familysize + job_dad + attitude_dad + iq + popularity + attendance, data = delinquency_train, disc_dad*disc_mum,  + friends*withdrawn)
#try a linear model
model1 <- glm(as_juvenile ~ familysize + job_dad + attitude_dad + iq + popularity + attendance, data = delinquency_train, disc_dad*disc_mum + friends*withdrawn)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, 0.50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#try a linear model
model1 <- glm(as_juvenile ~ familysize + job_dad + attitude_dad + iq + popularity + attendance, data = delinquency_train, disc_dad*disc_mum + friends*withdrawn)
#try a linear model
model1 <- glm(as_juvenile ~ familysize + job_dad + attitude_dad + iq + popularity + attendance, data = delinquency_train, disc_dad + disc_mum + friends*withdrawn)
#try a linear model
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
summary(model1)
#try a linear model
model1 <- glm(as_juvenile ~ disc_dad*disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
summary(model1)
#try a linear model
model1 <- glm(as_juvenile ~ disc_dad*disc_mum + familysize + job_dad + friends*withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
summary(model1)
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
summary(model1)
#try a second one with interactions
model2 <- glm(as_juvenile ~ disc_dad*disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
model2
summary(model2)
predict1 <- predict(model1, delinquency_train)
confusionMatrix(predict1, delinquency_test)
install.packages("caret")
NagelgerkeR2(model1)
install.packages("fmsb")
library(fmsb)
NagelgerkeR2(model1)
NagelkerkeR2(model1)
predict1 <- predict(model1, newdata = delinquency_test)
predict1 <- predict(model1, newdata = delinquency_test, type = "response")
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train, family = "binomial")
#convert id into factor
delinquency_train$id <- as.factor(delinquency_train$id)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, 0.50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#convert id into factor
delinquency_train$id <- as.factor(delinquency_train$id)
#convert id into factor
delinquency_train$as_juvenile <- as.factor(delinquency_train$as_juvenile)
delinquency_test$as_juvenile <- as.factor(delinquency_test$as_juvenile)
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train, family = "binomial")
summary(model1)
NagelkerkeR2(model1)
predict1 <- predict(model1, newdata = delinquency_test, type = "response")
exp(coef(model1))
describeBy(conviction_full, group = conviction_full$convicted)
confusionMatrix(predict1, delinquency_test$as_juvenile)
table(predict1, delinquency_test$as_juvenile)
confusionMatrix(predict1, delinquency_test$as_juvenile)
library(caret)
confusionMatrix(predict1, delinquency_test$as_juvenile)
predict1 <- predict(model1, newdata = delinquency_test, type = "response")
table(predict1, delinquency_train$as_juvenile)
confusionMatrix(predict1, delinquency_test$as_juvenile)
predict1 <- predict(model1, newdata = delinquency_test)
confusionMatrix(predict1, delinquency_test$as_juvenile)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, 0.50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#convert id into factor
delinquency_train$as_juvenile <- as.factor(delinquency_train$as_juvenile)
delinquency_test$as_juvenile <- as.factor(delinquency_test$as_juvenile)
delinquency_train <- sample_frac(final_delinquency, .50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, .50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#convert id into factor
delinquency_train$as_juvenile <- as.factor(delinquency_train$as_juvenile)
delinquency_test$as_juvenile <- as.factor(delinquency_test$as_juvenile)
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train, family = "binomial")
summary(model1)
#find R2 and odds ratio
NagelkerkeR2(model1)
exp(coef(model1))
predict1 <- predict(model1, newdata = delinquency_test)
confusionMatrix(predict1, delinquency_test$as_juvenile)
table(predict1, delinquency_test$as_juvenile)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, .50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#convert id into factor
delinquency_train$as_juvenile <- as.factor(delinquency_train$as_juvenile)
delinquency_test$as_juvenile <- as.factor(delinquency_test$as_juvenile)
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train, family = "binomial")
summary(model1)
#find R2 and odds ratio
NagelkerkeR2(model1)
exp(coef(model1))
predict1 <- predict(model1, newdata = delinquency_test)
table(predict1, delinquency_test$as_juvenile)
#try a second one with interactions
model2 <- glm(as_juvenile ~ disc_dad*disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
confusionMatrix(predict1, delinquency_test$as_juvenile)
confusionMatrix(table(predict1, delinquency_test$as_juvenile))
delinquency_test = na.omit(delinquency_test)
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train, family = "binomial")
summary(model1)
#find R2 and odds ratio
NagelkerkeR2(model1)
exp(coef(model1))
predict1 <- predict(model1, newdata = delinquency_test)
confusionMatrix(predict1, delinquency_test$as_juvenile)
model2 <- glm(as_juvenile ~ disc_dad*disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
#set seed and split for the model
set.seed(23)
delinquency_train <- sample_frac(final_delinquency, .50)
delinquency_test <- setdiff(final_delinquency, delinquency_train)
#convert id into factor
delinquency_train$as_juvenile <- as.factor(delinquency_train$as_juvenile)
delinquency_test$as_juvenile <- as.factor(delinquency_test$as_juvenile)
#delinquency_test = na.omit(delinquency_test)
#try a linear model with simple effects
model1 <- glm(as_juvenile ~ disc_dad + disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train, family = "binomial")
summary(model1)
#find R2 and odds ratio
NagelkerkeR2(model1)
exp(coef(model1))
predict1 <- predict(model1, newdata = delinquency_test)
confusionMatrix(predict1, delinquency_test$as_juvenile)
model2 <- glm(as_juvenile ~ disc_dad*disc_mum + familysize + job_dad + friends + withdrawn + attitude_dad + iq + popularity + attendance, data = delinquency_train)
#some plot for train and test
plot(simulateResiduals(model1))
install.packages("DHARma")
install.packages("DHARMa")
library(DHARMa)
#some plot for train and test
plot(simulateResiduals(model1))
